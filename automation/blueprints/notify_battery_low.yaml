blueprint:
  name: Low battery level detection & notification for all battery sensors
  description: Regularly test all sensors with 'battery' device-class for crossing a certain battery level threshold and if so create a persistent notification
  domain: automation
  author: Claus Nielsen
  source_url: https://github.com/CTNielsen/homeassistant/blob/main/automation/blueprints/notify_battery_low.yaml
  input:
    threshold:
      name: Battery warning level threshold
      description: Battery sensors below threshold are assumed to be low-battery (as
        well as binary battery sensors with value 'on').
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0
    time:
      name: Time to test on
      description: Test is run  every day at configured time
      default: '10:00:00'
      selector:
        time: {}
    single_notification:
      name: Create only one notification
      description: Limit the notifications to a single per day. 'false' meaning a notification is created per device running low on battery.
      selector:
        boolean:
    title:
      name: Title
      description: Notification title
      default: Low battery level
      selector:
        text: {}
    message:
      name: Message
      description: Notification message (variable 'sensor' is available for use with members 'name' and 'percentage' which can be used to construct the message)
      default: Sensor {{ sensor.name ~ ' (' ~ sensor.percentage ~ '%)' }}
      selector:
        text: {}
    exclude:
      name: Excluded Sensors
      description: Battery sensors (e.g. smartphone) to exclude from detection
      default: []
      selector:
        entity:
          multiple: true
          filter:
            device_class: battery

mode: single
variables:
  single_notification: !input 'single_notification'
  threshold: !input 'threshold'
  exclude: !input 'exclude'
  sensors: >-
    {% set result = namespace(sensors=[]) %}
    {% for state in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
      {% if 0 <= state.state | int(-1) < threshold | int and not state.entity_id in exclude %}
        {% set result.sensors = result.sensors + [{'name': state.name, 'percentage':state.state}] %}
      {% endif %}
    {% endfor %}
    {% for state in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
      {% if not state.entity_id in exclude %}
        {% set result.sensors = result.sensors + [{'name': state.name, 'percentage':0}] %}
      {% endif %}
    {% endfor %}
    {{ result.sensors }}
trigger:
  - platform: time
    at: !input 'time'
action:
  - if:
      - condition: template
        value_template: !input 'single_notification'
    then:
      - variables:
          sensor: "{{ sensors[0] }}"
      - service: notify.persistent_notification
        data:
          title: !input title
          message: !input message
    else:
      - repeat:
          for_each: "{{ sensors }}"
          sequence:
            - variables:
                sensor: >-
                  {{ repeat.item }}
            - service: notify.persistent_notification
              data:
                title: !input title
                message: !input message

